enum ECheckSolidFootingFlags
{
    CSF_SOLIDGROUND = 1,
    CSF_SOLIDACTORS = 2,
    
    CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

class Passenger : Playerpawn
{
//put vars here
	int wounds;
	int GodFrames;
	int OverchargeCounter;
	bool DoubleJump;
	int JumpHangCounter;
Default
	{
		+NOSKIN
		
		Health 106;
		Radius 8;
		Height 48;
		Mass 100;
		Painchance 255;
		Speed 0.5;
		Player.AttackZOffset 8;
		Player.JumpZ 7;
		MaxStepHeight 16;
		Player.GruntSpeed 12;
		Player.FallingScreamSpeed 35, 40;
		Player.ViewHeight 32;
		Player.UseRange 32;
		
		StencilColor "C43432";
		Player.ViewBob 0.0;
		
		Player.DamageScreenColor "000000", 0.0;
		Player.StartItem "CT_Macuahuitl";
		Player.StartItem "CT_Nailgun";//"CT_Pistol";
		Player.StartItem "CT_NailClip", 50;

		Player.DisplayName "Passenger";
		Player.WeaponSlot 1, 'CT_Macuahuitl';
		Player.WeaponSlot 2, 'CT_Nailgun', 'CT_SuperNailgun';
		Player.WeaponSlot 3, 'CT_Shotgun';
		//Player.WeaponSlot 4, 'Chaingun';
		Player.WeaponSlot 5, 'CT_Lazer';
		//Player.WeaponSlot 6, 'PlasmaRifle';
		//Player.WeaponSlot 7, 'BFG9000';
	}
override void PostBeginPlay()
	{
		super.PostBeginPlay();
		wounds = 6;
		DoubleJump = FALSE;
		JumpHangCounter = 24;
	}
States
	{
	Spawn:
		PLAY A 1;
		Loop;
	See:
		PLAY A 4;
		Loop;
	Melee:
		PLAY F 6 BRIGHT;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain;
		Goto Spawn;
	Death:
		PLAY H 10;
		PLAY I 10 A_PlayerScream;
		PLAY J 10 A_NoBlocking;
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 5;
		PLAY P 5 A_XScream;
		PLAY Q 5 A_NoBlocking;
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
	}
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// overrides go here
override void CheckJump()//This lets us double jump
	{
		let player = self.player;
		if (player.cmd.buttons & BT_JUMP)
		{
			if (player.crouchoffset != 0)//If we are crouching we cannot jump and instead must stand up
			{
				player.crouching = 1;
			}
			else if (waterlevel >= 2)//swim instead of jumping in water
			{
				Vel.Z = 4 * Speed;
			}
			else if (bNoGravity)
			{
				Vel.Z = 3.;
			}
			else if (player.onground && player.jumpTics == 0)//is it okay to jump
			{
				double jumpvelz = JumpZ * 35 / TICRATE;//this is how much we jump

				Vel.Z += jumpvelz;
				bOnMobj = false;
				player.jumpTics = JumpHangCounter;
				if (!(player.cheats & CF_PREDICTING)) A_PlaySound("weapon-nailgun-fire", CHAN_BODY);
				DoubleJump = False;
			}
			else if (!player.onground && DoubleJump && player.jumpTics > 0 && player.jumpTics <= 12)
			{
				double jumpvelz = JumpZ * 35 / TICRATE;
				Vel.Z = jumpvelz;
				bOnMobj = false;
				player.jumpTics = -1 * JumpHangCounter/2;
				if (!(player.cheats & CF_PREDICTING)) A_PlaySound("weapon-nailgun-fire", CHAN_BODY);
				DoubleJump = False;
			}
		}
	}
Override void PlayerThink()
	{
		if (player.jumpTics != 0)
		{
			if (player.JumpTics >= JumpHangCounter/2)//Player cannot jump or double jump for a time after jumping
				player.jumpTics--;
				
			if (player.jumpTics > 0 && player.jumpTics < JumpHangCounter/2 && !(player.cmd.buttons & BT_JUMP))//player can only double jump if they are not holding the button
				DoubleJump = True;
			if (player.onground && player.JumpTics < 0)
				player.jumpTics++;
				
			if (player.onground && player.JumpTics > 0)
				player.jumpTics--;
		}
		Super.PlayerThink();
	}

Override void MovePlayer()
	{
		Super.MovePlayer();
		CT_SlideLess();
	}
override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)//This just lets me go this whenever the player takes damage, even if they don't feel pain
    {
		GodFrames = 6;
		return damage;
    }
override void Tick()
	{
		CT_DamageFlash();
		CT_OverchargeCooldown(CountInv("BasicArmor"), health, wounds, 100 + wounds, 70/3);
		super.Tick();
	}
//Remember, exploding projectiles deal 2 instances of damage, so you can only survive 3 rockets even though you have 6 wounds
//perhaps incude handling regarding that behaviour?
override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if(CountInv("BasicArmor") > 0)
			SetShade("89AC2F");//flash green for armor damage
		else
			SetShade("C43432");//flash red for health damage
		If(CT_CheckDamageFlash())//There is probably a better way to do this, but I do ot care today
			A_SetInventory("PowerInvulnerable", 1);
		else
			A_SetInventory("PowerInvulnerable", 0);
	
	//damage set to 0 if god mode is on
		let player = self.player;
		int cheats = player.cheats;
		if(bINVULNERABLE || bNODAMAGE || CountInv("PowerInvulnerable") > 0 || cheats & (CF_GODMODE | CF_GODMODE2))
		{
			damage = 0;
		}
		
		flags |= DMG_NO_ARMOR|DMG_NO_PROTECT;//I will manually reimpliment these if needed
		int armor = CountInv("BasicArmor");
		int newarmor;
		int realhealth = health - wounds;
		if(realhealth > 0 || armor > 0)//we have something to take damage that isn't wounds
		{
			if(armor >= damage)//armor always reduces 1-for-1 so we don't care about its properties, just that it is armor
			{
				flags |= DMG_THRUSTLESS;
				newarmor = armor - damage;
				damage = 0;
			}
			else//take all from armor
			{
				damage = damage - armor;
				newarmor = 0;
			}
			A_SetInventory("BasicArmor", newarmor);//make sure to damage armor manually or it gets weird
			
			if(realhealth <= damage && damage != 0)//take everything that isn't wounds from health
			{
				damage = realhealth;
			}
		}
		else if(damage > 0)//take from wounds
		{
			damage = 1;
			wounds--;
			MaxHealth = 100 + wounds;
		}
	if(damage > 0)
		return super.damagemobj(inflictor,source,damage,mod,flags,angle);
	else
		return super.damagemobj(inflictor,source,damage,mod,flags,angle);
	}
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// functions go here
action void CT_OverchargeCooldown(int OverA, int OverH, int OverW, int OverMH, int OverDT)
{	
	int cheats = self.player.cheats;
	Bool GodMode;
		if(bINVULNERABLE || bNODAMAGE || CountInv("PowerInvulnerable") > 0 || cheats & (CF_GODMODE | CF_GODMODE2))
		{
			GodMode = TRUE;
		}
	If(!GodMode)
		invoker.OverchargeCounter++;
	if(invoker.OverchargeCounter >= OverDT)
		{
		invoker.OverchargeCounter *= 0;
		
		if(OverA > 100)
			A_SetInventory("BasicArmor", OverA - 1);
		if(OverH > OverMH && OverH > OverW)
			A_SetHealth(OverH - 1);
		}
	
}
action bool CT_CheckDamageFlash()
{
	if(invoker.GodFrames > 0)
		return TRUE;
	else
		return FALSE;
}
action void CT_DamageFlash()
{
	if(invoker.GodFrames > 0 && invoker.GodFrames % 2 == 1)
		{
			//SetShade("C43432");
			//If poison damage is a thing, check the damage type and use setshade to make you green instead of red
			A_SetRenderStyle(1.0,STYLE_Stencil);
			invoker.GodFrames -= 1;
		}
		else if(invoker.GodFrames > 0)
		{
			A_SetRenderStyle(1.0,STYLE_Normal);
			invoker.GodFrames -= 1;
		}
		else
		{
			A_SetRenderStyle(1.0,STYLE_Normal);
		}
}
action void CT_SlideLess()
{
	int buttons = GetPlayerInput(INPUT_BUTTONS);
	If(CT_CheckSolidFooting(CSF_ALL) && !(buttons & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT)))//are we not pressing any movement keys while standing on something?
	{
		A_ScaleVelocity(0.95);
	}
}
action bool CT_CheckSolidFooting(int flags = CSF_ALL)
	{
		if ((abs(pos.z - GetZAt()) <= 1) && (flags & CSF_SOLIDGROUND))//standing on ground
		{
			return TRUE;
		}	
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if ((below) && (flags & CSF_SOLIDACTORS))//standing on thing
		{
			return TRUE;
		}
		return FALSE;
	}
}